QS :- Delete Node in a Linked List
QS Link :- https://leetcode.com/problems/delete-node-in-a-linked-list/description/?envType=daily-question&envId=2024-05-05

#include <iostream>

// struct ListNode {
//     int val;
//     ListNode *next;
//     ListNode(int x) : val(x), next(nullptr) {}
// };

class Solution {
public:
    void deleteNode(ListNode* node) {
        if (node == nullptr || node->next == nullptr)
            return;

        ListNode* prev = node;
        while (node->next != nullptr) {
            node->val = node->next->val;
            prev = node;
            node = node->next;
        }

        prev->next = nullptr; // Adjust the next pointer of the node before the given node
        delete node;
    }
};

// Function to print the linked list
void printList(ListNode* head) {
    while (head != nullptr) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

// int main() {
//     Solution solution;

//     // Example 1
//     ListNode* head1 = new ListNode(4);
//     head1->next = new ListNode(5);
//     head1->next->next = new ListNode(1);
//     head1->next->next->next = new ListNode(9);
//     ListNode* node1 = head1->next; // Node to be deleted

//     solution.deleteNode(node1);
//     printList(head1); // Output: 4 1 9

//     // Example 2
//     ListNode* head2 = new ListNode(4);
//     head2->next = new ListNode(5);
//     head2->next->next = new ListNode(1);
//     head2->next->next->next = new ListNode(9);
//     ListNode* node2 = head2->next->next; // Node to be deleted

//     solution.deleteNode(node2);
//     printList(head2); // Output: 4 5 9

//     // Free memory
//     delete head1;
//     delete head2;

//     return 0;
// }
