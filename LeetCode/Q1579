class UnionFind {
public:
    vector<int> parent;
    vector<int> rank;
    
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 1);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) {
            return;
        }
        if (rank[px] < rank[py]) {
            parent[px] = py;
        } else if (rank[py] < rank[px]) {
            parent[py] = px;
        } else {
            parent[px] = py;
            rank[py]++;
        }
    }
};

class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        UnionFind ufa(n), ufb(n);
        int cnt = 0;
        
        // type 3 edges can be used by both Alice and Bob
        for (const auto& edge : edges) {
            if (edge[0] == 3) {
                int x = edge[1] - 1, y = edge[2] - 1;
                if (ufa.find(x) != ufa.find(y)) {
                    ufa.unite(x, y);
                    ufb.unite(x, y);
                    cnt++;
                }
            }
        }
        
        // type 1 edges can be used by Alice only
        for (const auto& edge : edges) {
            if (edge[0] == 1) {
                int x = edge[1] - 1, y = edge[2] - 1;
                if (ufa.find(x) != ufa.find(y)) {
                    ufa.unite(x, y);
                    cnt++;
                }
            }
        }
        
        // type 2 edges can be used by Bob only
        for (const auto& edge : edges) {
            if (edge[0] == 2) {
                int x = edge[1] - 1, y = edge[2] - 1;
                if (ufb.find(x) != ufb.find(y)) {
                    ufb.unite(x, y);
                    cnt++;
                }
            }
        }
        
        // check if all nodes are connected for both Alice and Bob
        int a = ufa.find(0);
        int b = ufb.find(0);
        for (int i = 1; i < n; i++) {
            if (ufa.find(i) != a || ufb.find(i) != b) {
                return -1;
            }
        }
        
        return edges.size() - cnt;
    }
};
