class Solution {
public:
    int findMaxFish(vector<vector<int>>& grid) {
        int maxFish = 0;
        int m = grid.size(), n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int dr[] = {-1, 0, 1, 0};
        int dc[] = {0, 1, 0, -1};
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0 && !visited[i][j]) { // found a water cell with fish and not visited before
                    queue<pair<int, int>> q;
                    q.push({i, j});
                    visited[i][j] = true;
                    int fishCount = 0;
                    
                    while (!q.empty()) { // do BFS from the starting water cell
                        int r = q.front().first, c = q.front().second;
                        q.pop();
                        
                        if (grid[r][c] > 0) { // if it's a water cell with fish, catch the fish and mark the cell as visited
                            fishCount += grid[r][c];
                            grid[r][c] = 0;
                        }
                        
                        for (int k = 0; k < 4; k++) { // try to move to adjacent water cells
                            int nr = r + dr[k], nc = c + dc[k];
                            if (nr >= 0 && nr < m && nc >= 0 && nc < n && !visited[nr][nc] && grid[nr][nc] > 0) {
                                visited[nr][nc] = true;
                                q.push({nr, nc});
                            }
                        }
                    }
                    
                    maxFish = max(maxFish, fishCount); // update the maximum fish count
                }
            }
        }
        
        return maxFish;
    }
};
