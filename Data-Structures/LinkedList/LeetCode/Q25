#include <bits/stdc++.h>
using namespace std;


class Solution {
public:

/*

 T.C= O(n),   S.C= O(N/K)


    void reverse(ListNode *s, ListNode *e) {
        ListNode *p = NULL, *c=s, *n=s->next;
        while(p!=e) {
            c->next=p;
            p=c;
            c=n;
            if(n!=NULL)n=n->next;

        }
    } 



    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL || head->next==NULL || k==1)return head;
        ListNode *s = head, *e = head;
        int inc = k-1;
        while(inc--) {
            e=e->next;
            if(e==NULL)return head;
        }
        ListNode* nextHead = reverseKGroup(e->next,k);
        reverse(s,e);
        s->next = nextHead;
        return e;


    }


    */

    // T.C = O(n), S.C= O(1)


    void reverse(ListNode *s, ListNode *e) {
        ListNode *p = NULL, *c=s, *n=s->next;
        while(p!=e) {
            c->next=p;
            p=c;
            c=n;
            if(n!=NULL)n=n->next;

        }
    } 



    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL || head->next==NULL || k==1)return head;
        ListNode *dummy = new ListNode(-1);
        dummy->next=head;
        ListNode *beforeStart=dummy, *e=head;
        int i = 0;
        while(e!=NULL) {
            i++;
            if(i%k==0) {
                //reversal
                ListNode *s = beforeStart->next, *temp=e->next; //For Holding Adress of e
                reverse(s,e);
                beforeStart->next=e;
                s->next=temp;
                beforeStart=s;
                e=s->next;

            } else {
                e=e->next;
            }
        }
        return dummy->next;

    }
};